const passport = require('passport');
//We only want to import strategy property of passport-google-oauth20 module
const GoogleStrategy = require('passport-google-oauth20').Strategy;
var keys = require('../config/keys');
const mongoose = require('mongoose');

//Fetching the userscollection from mongodb
const User = mongoose.model('userscollection');

//here argument 'user' is the user record returned by mongodb and to reference its id we can simply use '.id', we
// do not have to reference it using '_id'
//Here id is different than profile id . It is basically the id generated by mongodb for the user record
//user.id is automatically stuffed into the cookie on user side by passport.js
passport.serializeUser((user, done) => {
  done(null,user.id);
});

//This function turns user id into user object
passport.deserializeUser((id, done) => {
  User.findById(id)
  .then((user) => {
    done(null, user);
  })
});

//callback URL is the redirect URI which is registered at console.developer.google.com and users get
// redirected to this page after google grant the permission to user
//Passport object uses google strategy object whic is imported at the top of the page
passport.use(new GoogleStrategy(
  {
  clientID: keys.Googleclientid,
  clientSecret: keys.Googlesecretclientid,
  callbackURL: '/auth/google/callback',
  proxy:true
},
  //callback function whenever user is redirected to callbackURL
   (accessToken, refreshToken, profile, done) => {
    //console.log("profile" + JSON.stringify(profile));
    //save method will save the userscollection instance to mongodb
    User.findOne({googleId : profile.id}).then((userresult) =>{
      if(userresult){
        //done metod tells passport that it has finished creating the user and it can resume its auth flow
        console.log("user with same profile id already exists in the database");
        done(null,userresult );

      }else{
        //save is also an async operation so we need then
        new User({googleId : profile.id}).save().
        then((user) => {
          done(null, user);
        })
      }
    }
    )

  }
 )
);
